#!/usr/bin/env python
#
# Script for querying the delvered exposures table

import os
import sys
import shutil
import time
from argparse import ArgumentParser
from dlnpyutils import utils as dln
from delvered import delvered_db as delvedb
from astropy.table import Table,hstack,vstack
import numpy as np

# Main command-line program
if __name__ == "__main__":
    parser = ArgumentParser(description='Query the delvered exposures table.')
    parser.add_argument('ra', type=str, nargs=1, help='Right Ascension')
    parser.add_argument('dec', type=str, nargs=1, help='Declination')
    parser.add_argument('outfile', type=str, nargs=1, help='Output filename')
    parser.add_argument('--lim', type=float, default=0.2, help='Search size (+/- deg)')
    args = parser.parse_args()

    ra = float(dln.first_el(args.ra))
    dec = float(dln.first_el(args.dec))
    lim = float(dln.first_el(args.lim))
    ralim = lim/np.cos(np.deg2rad(dec))
    outfile = dln.first_el(args.outfile)

    print('Querying the DELVERED Exposures/Chips table')
    print('RA = '+str(ra))
    print('DEC = '+str(dec))
    print('LIM = '+str(lim)+' deg')

    # If the database exists already, back it up
    expdir = '/net/dl2/dnidever/delve/exposures/'
    dbfile = '/net/dl2/dnidever/delve/bricks/db/delvered_summary.db'
    if not os.path.exists(dbfile):
        print(dbfile+' NOT FOUND')
        sys.exit()

    # Run the code
    rar = [ra-ralim,ra+ralim]
    decr = [dec-lim,dec+lim]
    print(rar)
    print(decr)
    # Wrap across RA=0
    if ra-ralim < 0 or ra+ralim > 360:
        # small ra
        if ra-ralim<0:
            rar1 = [0,ra+ralim]
            rar2 = [360+(ra-ralim),360]
        # large ra
        else:
            rar1 = [ra-ralim,360]
            rar2 = [0,ra+ralim-360]
        cat1 = delvedb.getdatadb(dbfile,rar=rar1,decr=decr,table='chip')
        cat2 = delvedb.getdatadb(dbfile,rar=rar2,decr=decr,table='chip')
        cat = np.hstack((cat1,cat2))
    else:
        cat = delvedb.getdatadb(dbfile,rar=rar,decr=decr,table='chip')
    ncat = dln.size(cat)
    print(str(ncat)+' matches found')
    if dln.size(cat)==0:
        dln.writelines(outfile,'')
        sys.exit()
    # Save the output
    print('Writing results to '+outfile)
    if os.path.exists(outfile): os.remove(outfile)
    Table(cat).write(outfile)
